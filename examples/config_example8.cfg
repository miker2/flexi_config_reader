# This config file was generated to test and fix an issue related to the way proto vars are
# resolved.  The key detail here is that `leg_proto` references the same proto (protos.joint_proto)
# twice. When resolving `joint1` and `joint2`, the `joint_proto` variables should resolve
# differently. There was a bug that caused the variables from `joint1` to be used for `joint2`.

struct protos {
  proto joint_proto {
    key1 = $VAR1
    key2 = $VAR2
    not_a_var = 27
    ref_var = $(concrete.leg1.$VAR1)  # This one is tricky!
  }

  # Another comment here!

  proto leg_proto {
    key_a = $KEY_A
    key_b = $KEY_B

    reference protos.joint_proto as joint1 {
      $VAR1 = "joint1.key1"
      $VAR2 = "joint1.var2"
    }

    reference protos.joint_proto as joint2 {
      $VAR1 = "joint2.key1"
      $VAR2 = "joint2.var2"
    }
  }

}

struct concrete {

  reference protos.leg_proto as leg1   {
    +add_key1 = 0
    $KEY_A = "leg1.key_a"
    $KEY_B = "leg1.key_b"
  }

}