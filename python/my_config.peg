
# TODO: Support `FLAT_KEY KVs value` type entries (user can specify fully qualified values)

# TODO: Create example with more comments to ensure they're handle properly everywhere.

grammar my_config
  map        <-  _ (struct / proto / reference)+ _ %make_map
  struct     <-  STRUCTs KEY TAIL STRUCTc END KEY _ %make_struct
  proto      <-  PROTOs KEY TAIL STRUCTc END KEY _ %make_proto
  reference  <-  REFs FLAT_KEY _ "as" _ KEY TAIL REFc END KEY _ %make_reference
  STRUCTs    <-  "struct" SP
  PROTOs     <-  "proto" SP
  REFs       <-  "reference" SP
  END        <-  "end" SP
  STRUCTc    <-  (struct / PAIR / reference / proto)+
  REFc       <-  (REF_VARSUB / REF_VARADD)+
  PAIR       <-  KEY KVs (value / VAR_REF / VAR) TAIL %make_pair
  REF_VARSUB <-  VAR KVs value TAIL %ref_sub_var
  REF_VARADD <-  "+" KEY KVs value TAIL %ref_add_var
  FLAT_KEY   <-  KEY ("." KEY)+  %found_key  # Flattened struct/reference syntax
  KEY        <-  [a-z] [a-zA-Z0-9_]*  %found_key
  value      <-  list / HEX / number / string
  string     <-  '"' [^"]* '"' %make_string
  list       <-  SBo value (COMMA value)* SBc %make_list
  number     <-  (!HEX) [+-]? [0-9]+ ("." [0-9]*)? ("e" [+-]? [0-9]+)?  %make_number
  VAR        <-  "$" [A-Z0-9_]+  %make_var
  VAR_REF    <-  "$(" FLAT_KEY ")" %var_ref
  HEX        <-  "0" [xX] [0-9a-fA-F]+ %make_hex
  KVs        <-  oSP "=" oSP
  CBo        <-  "{" oSP
  CBc        <-  oSP "}" _
  SBo        <-  "[" oSP
  SBc        <-  oSP "]"
  COMMA      <-  oSP "," oSP
  TAIL       <-  _ (COMMENT)*
  COMMENT    <-  "#" [^\n\r]* _
  oSP        <-  [ \t]*      # optional space
  SP         <-  [ \t]+      # mandatory space
  NL         <-  [\r\n]+     # (required) new line
  _          <-  [ \t\r\n]*  # All whitespace

