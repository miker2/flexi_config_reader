name: CI Linux

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.build_type }}
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: ${{ matrix.build_type }}
      CTEST_OUTPUT_ON_FAILURE: ON
    strategy:
      fail-fast: false
      matrix:

        name: [
          ubuntu-18.04-gcc-10,
          ubuntu-20.04-clang-13,
          mac-os-latest
        ]

        build_type: [Debug, Release]
        include:
          - name: ubuntu-18.04-gcc-10
            os: ubuntu-18.04
            compiler: gcc
            version: "10"

          - name: ubuntu-20.04-clang-13
            os: ubuntu-20.04
            compiler: clang
            version: "13"

          - name: mac-os-latest
            os: macos-latest
            CC: clang
            CXX: clang++

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2

    - name: Install dependencies
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          if [ "${{ matrix.compiler }}" = "clang" ]; then
            wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            sudo add-apt-repository --yes --update \
                "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-${{ matrix.version }} main"
          fi
          sudo apt-get -y update
          # sudo apt-get -y upgrade

          sudo apt-get install -y build-essential ninja-build g++ #python-is-python3

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            sudo apt-get install -y clang-format-${{ matrix.version }} clang-tidy-${{ matrix.version }}
            which clang-format || sudo ln -s /usr/bin/clang-format-${{ matrix.version }} /usr/bin/clang-format
            which clang-format
            clang-format --version
            sudo ln -s /usr/bin/clang-tidy-${{ matrix.version }} /usr/bin/clang-tidy
            which clang-tidy

            clang-tidy --version
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi
        elif [ "${{ runner.os }}" = "macOS" ]; then
          brew install ninja
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
      shell: bash

    - uses: actions/checkout@v2
      with:
        repository: jcoglan/canopy.git
        ref: main
        path: ./canopy

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G Ninja

    - name: Generate python parsers
      run: |
        pushd ${{github.workspace}}/canopy
        npm install
        make test-python
        popd
        pushd ${{github.workspace}}/python
        ${{github.workspace}}/canopy/bin/canopy maps.peg --lang python
        popd

    - uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - name: Run python tests
      run: |
        pushd ${{github.workspace}}/python
        python3 maps_test.py
        python3 -m unittest discover -v
        popd

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        ctest -C ${{env.BUILD_TYPE}}
        ${{github.workspace}}/build/cpp/jsonish_test
        ${{github.workspace}}/build/cpp/include_file_test
        for i in `seq 1 8`; do
          ${{github.workspace}}/build/cpp/config_build ${{github.workspace}}/examples/config_example$i.cfg
        done
